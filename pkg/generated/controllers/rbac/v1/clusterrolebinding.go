/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	"github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/api/rbac/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type ClusterRoleBindingHandler func(string, *v1.ClusterRoleBinding) (*v1.ClusterRoleBinding, error)

type ClusterRoleBindingController interface {
	generic.ControllerMeta
	ClusterRoleBindingClient

	OnChange(ctx context.Context, name string, sync ClusterRoleBindingHandler)
	OnRemove(ctx context.Context, name string, sync ClusterRoleBindingHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() ClusterRoleBindingCache
}

type ClusterRoleBindingClient interface {
	Create(*v1.ClusterRoleBinding) (*v1.ClusterRoleBinding, error)
	Update(*v1.ClusterRoleBinding) (*v1.ClusterRoleBinding, error)

	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1.ClusterRoleBinding, error)
	List(opts metav1.ListOptions) (*v1.ClusterRoleBindingList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ClusterRoleBinding, err error)
}

type ClusterRoleBindingCache interface {
	Get(name string) (*v1.ClusterRoleBinding, error)
	List(selector labels.Selector) ([]*v1.ClusterRoleBinding, error)

	AddIndexer(indexName string, indexer ClusterRoleBindingIndexer)
	GetByIndex(indexName, key string) ([]*v1.ClusterRoleBinding, error)
}

type ClusterRoleBindingIndexer func(obj *v1.ClusterRoleBinding) ([]string, error)

type clusterRoleBindingController struct {
	*generic.NonNamespacedController[*v1.ClusterRoleBinding, *v1.ClusterRoleBindingList]
}

func (c *clusterRoleBindingController) OnChange(ctx context.Context, name string, sync ClusterRoleBindingHandler) {
	c.Controller.OnChange(ctx, name, generic.ObjectHandler[*v1.ClusterRoleBinding](sync))
}

func (c *clusterRoleBindingController) OnRemove(ctx context.Context, name string, sync ClusterRoleBindingHandler) {
	c.Controller.OnRemove(ctx, name, generic.ObjectHandler[*v1.ClusterRoleBinding](sync))
}

func (c *clusterRoleBindingController) Cache() ClusterRoleBindingCache {
	return &clusterRoleBindingCache{
		c.NonNamespacedController.Cache(),
	}
}

type clusterRoleBindingCache struct {
	*generic.NonNamespacedCache[*v1.ClusterRoleBinding]
}

func (c *clusterRoleBindingCache) AddIndexer(indexName string, indexer ClusterRoleBindingIndexer) {
	c.Cache.AddIndexer(indexName, generic.Indexer[*v1.ClusterRoleBinding](indexer))
}
