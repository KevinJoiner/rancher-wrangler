/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	"github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/api/rbac/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

// RoleBindingController interface for managing RoleBinding resources.
type RoleBindingController interface {
	generic.ControllerMeta
	RoleBindingClient

	// OnChange runs the given handler when the controller detects a resource was changed.
	OnChange(ctx context.Context, name string, sync RoleBindingHandler)

	// OnRemove runs the given handler when the controller detects a resource was changed.
	OnRemove(ctx context.Context, name string, sync RoleBindingHandler)

	// Enqueue adds the resource with the given name to the worker queue of the controller.
	Enqueue(namespace, name string)

	// EnqueueAfter runs Enqueue after the provided duration.
	EnqueueAfter(namespace, name string, duration time.Duration)

	// Cache returns a cache for the resource type T.
	Cache() RoleBindingCache
}

// RoleBindingClient interface for managing RoleBinding resources in Kubernetes.
type RoleBindingClient interface {
	// Create creates a new object and return the newly created Object or an error.
	Create(*v1.RoleBinding) (*v1.RoleBinding, error)

	// Update updates the object and return the newly updated Object or an error.
	Update(*v1.RoleBinding) (*v1.RoleBinding, error)

	// Delete deletes the Object in the given name.
	Delete(namespace, name string, options *metav1.DeleteOptions) error

	// Get will attempt to retrieve the resource with the specified name.
	Get(namespace, name string, options metav1.GetOptions) (*v1.RoleBinding, error)

	// List will attempt to find multiple resources.
	List(namespace string, opts metav1.ListOptions) (*v1.RoleBindingList, error)

	// Watch will start watching resources.
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)

	// Patch will patch the resource with the matching name.
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.RoleBinding, err error)
}

// RoleBindingCache interface for retrieving RoleBinding resources in memory.
type RoleBindingCache interface {
	// Get returns the resources with the specified name from the cache.
	Get(namespace, name string) (*v1.RoleBinding, error)

	// List will attempt to find resources from the Cache.
	List(namespace string, selector labels.Selector) ([]*v1.RoleBinding, error)

	// AddIndexer adds  a new Indexer to the cache with the provided name.
	// If you call this after you already have data in the store, the results are undefined.
	AddIndexer(indexName string, indexer RoleBindingIndexer)

	// GetByIndex returns the stored objects whose set of indexed values
	// for the named index includes the given indexed value.
	GetByIndex(indexName, key string) ([]*v1.RoleBinding, error)
}

// RoleBindingHandler is function for performing any potential modifications to a RoleBinding resource.
type RoleBindingHandler func(string, *v1.RoleBinding) (*v1.RoleBinding, error)

// RoleBindingIndexer computes a set of indexed values for the provided object.
type RoleBindingIndexer func(obj *v1.RoleBinding) ([]string, error)

// RoleBindingGenericController wraps wrangler/pkg/generic.Controller so that the function definitions adhere to RoleBindingController interface.
type RoleBindingGenericController struct {
	generic.ControllerInterface[*v1.RoleBinding, *v1.RoleBindingList]
}

// OnChange runs the given resource handler when the controller detects a resource was changed.
func (c *RoleBindingGenericController) OnChange(ctx context.Context, name string, sync RoleBindingHandler) {
	c.ControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v1.RoleBinding](sync))
}

// OnRemove runs the given object handler when the controller detects a resource was changed.
func (c *RoleBindingGenericController) OnRemove(ctx context.Context, name string, sync RoleBindingHandler) {
	c.ControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v1.RoleBinding](sync))
}

// Cache returns a cache of resources in memory.
func (c *RoleBindingGenericController) Cache() RoleBindingCache {
	return &RoleBindingGenericCache{
		c.ControllerInterface.Cache(),
	}
}

// RoleBindingGenericCache wraps wrangler/pkg/generic.Cache so the function definitions adhere to RoleBindingCache interface.
type RoleBindingGenericCache struct {
	generic.CacheInterface[*v1.RoleBinding]
}

// AddIndexer adds  a new Indexer to the cache with the provided name.
// If you call this after you already have data in the store, the results are undefined.
func (c RoleBindingGenericCache) AddIndexer(indexName string, indexer RoleBindingIndexer) {
	c.CacheInterface.AddIndexer(indexName, generic.Indexer[*v1.RoleBinding](indexer))
}
