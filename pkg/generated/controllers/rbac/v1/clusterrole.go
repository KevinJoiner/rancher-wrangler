/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	"github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/api/rbac/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type ClusterRoleHandler func(string, *v1.ClusterRole) (*v1.ClusterRole, error)

type ClusterRoleController interface {
	generic.ControllerMeta
	ClusterRoleClient

	OnChange(ctx context.Context, name string, sync ClusterRoleHandler)
	OnRemove(ctx context.Context, name string, sync ClusterRoleHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() ClusterRoleCache
}

type ClusterRoleClient interface {
	Create(*v1.ClusterRole) (*v1.ClusterRole, error)
	Update(*v1.ClusterRole) (*v1.ClusterRole, error)

	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1.ClusterRole, error)
	List(opts metav1.ListOptions) (*v1.ClusterRoleList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ClusterRole, err error)
}

type ClusterRoleCache interface {
	Get(name string) (*v1.ClusterRole, error)
	List(selector labels.Selector) ([]*v1.ClusterRole, error)

	AddIndexer(indexName string, indexer ClusterRoleIndexer)
	GetByIndex(indexName, key string) ([]*v1.ClusterRole, error)
}

type ClusterRoleIndexer func(obj *v1.ClusterRole) ([]string, error)

type clusterRoleController struct {
	*generic.NonNamespacedController[*v1.ClusterRole, *v1.ClusterRoleList]
}

func (c *clusterRoleController) OnChange(ctx context.Context, name string, sync ClusterRoleHandler) {
	c.Controller.OnChange(ctx, name, generic.ObjectHandler[*v1.ClusterRole](sync))
}

func (c *clusterRoleController) OnRemove(ctx context.Context, name string, sync ClusterRoleHandler) {
	c.Controller.OnRemove(ctx, name, generic.ObjectHandler[*v1.ClusterRole](sync))
}

func (c *clusterRoleController) Cache() ClusterRoleCache {
	return &clusterRoleCache{
		c.NonNamespacedController.Cache(),
	}
}

type clusterRoleCache struct {
	*generic.NonNamespacedCache[*v1.ClusterRole]
}

func (c *clusterRoleCache) AddIndexer(indexName string, indexer ClusterRoleIndexer) {
	c.Cache.AddIndexer(indexName, generic.Indexer[*v1.ClusterRole](indexer))
}
