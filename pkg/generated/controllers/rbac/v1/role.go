/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	"github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/api/rbac/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type RoleHandler func(string, *v1.Role) (*v1.Role, error)

type RoleController interface {
	generic.ControllerMeta
	RoleClient

	OnChange(ctx context.Context, name string, sync RoleHandler)
	OnRemove(ctx context.Context, name string, sync RoleHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() RoleCache
}

type RoleClient interface {
	Create(*v1.Role) (*v1.Role, error)
	Update(*v1.Role) (*v1.Role, error)

	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.Role, error)
	List(namespace string, opts metav1.ListOptions) (*v1.RoleList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Role, err error)
}

type RoleCache interface {
	Get(namespace, name string) (*v1.Role, error)
	List(namespace string, selector labels.Selector) ([]*v1.Role, error)

	AddIndexer(indexName string, indexer RoleIndexer)
	GetByIndex(indexName, key string) ([]*v1.Role, error)
}

type RoleIndexer func(obj *v1.Role) ([]string, error)

type roleController struct {
	*generic.Controller[*v1.Role, *v1.RoleList]
}

func (c *roleController) OnChange(ctx context.Context, name string, sync RoleHandler) {
	c.Controller.OnChange(ctx, name, generic.ObjectHandler[*v1.Role](sync))
}

func (c *roleController) OnRemove(ctx context.Context, name string, sync RoleHandler) {
	c.Controller.OnRemove(ctx, name, generic.ObjectHandler[*v1.Role](sync))
}

func (c *roleController) Cache() RoleCache {
	return &roleCache{
		c.Controller.Cache(),
	}
}

type roleCache struct {
	*generic.Cache[*v1.Role]
}

func (c *roleCache) AddIndexer(indexName string, indexer RoleIndexer) {
	c.Cache.AddIndexer(indexName, generic.Indexer[*v1.Role](indexer))
}
