/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	"github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/api/discovery/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type EndpointSliceHandler func(string, *v1.EndpointSlice) (*v1.EndpointSlice, error)

type EndpointSliceController interface {
	generic.ControllerMeta
	EndpointSliceClient

	OnChange(ctx context.Context, name string, sync EndpointSliceHandler)
	OnRemove(ctx context.Context, name string, sync EndpointSliceHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() EndpointSliceCache
}

type EndpointSliceClient interface {
	Create(*v1.EndpointSlice) (*v1.EndpointSlice, error)
	Update(*v1.EndpointSlice) (*v1.EndpointSlice, error)

	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.EndpointSlice, error)
	List(namespace string, opts metav1.ListOptions) (*v1.EndpointSliceList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.EndpointSlice, err error)
}

type EndpointSliceCache interface {
	Get(namespace, name string) (*v1.EndpointSlice, error)
	List(namespace string, selector labels.Selector) ([]*v1.EndpointSlice, error)

	AddIndexer(indexName string, indexer EndpointSliceIndexer)
	GetByIndex(indexName, key string) ([]*v1.EndpointSlice, error)
}

type EndpointSliceIndexer func(obj *v1.EndpointSlice) ([]string, error)

type endpointSliceController struct {
	*generic.Controller[*v1.EndpointSlice, *v1.EndpointSliceList]
}

func (c *endpointSliceController) OnChange(ctx context.Context, name string, sync EndpointSliceHandler) {
	c.Controller.OnChange(ctx, name, generic.ObjectHandler[*v1.EndpointSlice](sync))
}

func (c *endpointSliceController) OnRemove(ctx context.Context, name string, sync EndpointSliceHandler) {
	c.Controller.OnRemove(ctx, name, generic.ObjectHandler[*v1.EndpointSlice](sync))
}

func (c *endpointSliceController) Cache() EndpointSliceCache {
	return &endpointSliceCache{
		c.Controller.Cache(),
	}
}

type endpointSliceCache struct {
	*generic.Cache[*v1.EndpointSlice]
}

func (c *endpointSliceCache) AddIndexer(indexName string, indexer EndpointSliceIndexer) {
	c.Cache.AddIndexer(indexName, generic.Indexer[*v1.EndpointSlice](indexer))
}
