/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	v1 "k8s.io/api/networking/v1"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type NetworkPolicyHandler func(string, *v1.NetworkPolicy) (*v1.NetworkPolicy, error)

type NetworkPolicyController interface {
	generic.ControllerMeta
	NetworkPolicyClient

	OnChange(ctx context.Context, name string, sync NetworkPolicyHandler)
	OnRemove(ctx context.Context, name string, sync NetworkPolicyHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() NetworkPolicyCache
}

type NetworkPolicyClient interface {
	Create(*v1.NetworkPolicy) (*v1.NetworkPolicy, error)
	Update(*v1.NetworkPolicy) (*v1.NetworkPolicy, error)
	UpdateStatus(*v1.NetworkPolicy) (*v1.NetworkPolicy, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.NetworkPolicy, error)
	List(namespace string, opts metav1.ListOptions) (*v1.NetworkPolicyList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.NetworkPolicy, err error)
}

type NetworkPolicyCache interface {
	Get(namespace, name string) (*v1.NetworkPolicy, error)
	List(namespace string, selector labels.Selector) ([]*v1.NetworkPolicy, error)

	AddIndexer(indexName string, indexer NetworkPolicyIndexer)
	GetByIndex(indexName, key string) ([]*v1.NetworkPolicy, error)
}

type NetworkPolicyIndexer func(obj *v1.NetworkPolicy) ([]string, error)

type networkPolicyController struct {
	*generic.Controller[*v1.NetworkPolicy, *v1.NetworkPolicyList]
}

func (c *networkPolicyController) OnChange(ctx context.Context, name string, sync NetworkPolicyHandler) {
	c.Controller.OnChange(ctx, name, generic.ObjectHandler[*v1.NetworkPolicy](sync))
}

func (c *networkPolicyController) OnRemove(ctx context.Context, name string, sync NetworkPolicyHandler) {
	c.Controller.OnRemove(ctx, name, generic.ObjectHandler[*v1.NetworkPolicy](sync))
}

func (c *networkPolicyController) Cache() NetworkPolicyCache {
	return &networkPolicyCache{
		c.Controller.Cache(),
	}
}

type networkPolicyCache struct {
	*generic.Cache[*v1.NetworkPolicy]
}

func (c *networkPolicyCache) AddIndexer(indexName string, indexer NetworkPolicyIndexer) {
	c.Cache.AddIndexer(indexName, generic.Indexer[*v1.NetworkPolicy](indexer))
}

type NetworkPolicyStatusHandler func(obj *v1.NetworkPolicy, status v1.NetworkPolicyStatus) (v1.NetworkPolicyStatus, error)

type NetworkPolicyGeneratingHandler func(obj *v1.NetworkPolicy, status v1.NetworkPolicyStatus) ([]runtime.Object, v1.NetworkPolicyStatus, error)

func FromNetworkPolicyHandlerToHandler(sync NetworkPolicyHandler) generic.Handler {
	return generic.FromObjectHandlerToHandler(generic.ObjectHandler[*v1.NetworkPolicy](sync))
}

func RegisterNetworkPolicyStatusHandler(ctx context.Context, controller NetworkPolicyController, condition condition.Cond, name string, handler NetworkPolicyStatusHandler) {
	statusHandler := &networkPolicyStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromNetworkPolicyHandlerToHandler(statusHandler.sync))
}

func RegisterNetworkPolicyGeneratingHandler(ctx context.Context, controller NetworkPolicyController, apply apply.Apply,
	condition condition.Cond, name string, handler NetworkPolicyGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &networkPolicyGeneratingHandler{
		NetworkPolicyGeneratingHandler: handler,
		apply:                          apply,
		name:                           name,
		gvk:                            controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterNetworkPolicyStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type networkPolicyStatusHandler struct {
	client    NetworkPolicyClient
	condition condition.Cond
	handler   NetworkPolicyStatusHandler
}

func (a *networkPolicyStatusHandler) sync(key string, obj *v1.NetworkPolicy) (*v1.NetworkPolicy, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type networkPolicyGeneratingHandler struct {
	NetworkPolicyGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *networkPolicyGeneratingHandler) Remove(key string, obj *v1.NetworkPolicy) (*v1.NetworkPolicy, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1.NetworkPolicy{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *networkPolicyGeneratingHandler) Handle(obj *v1.NetworkPolicy, status v1.NetworkPolicyStatus) (v1.NetworkPolicyStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.NetworkPolicyGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
