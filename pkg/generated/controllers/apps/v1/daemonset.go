/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	v1 "k8s.io/api/apps/v1"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type DaemonSetHandler func(string, *v1.DaemonSet) (*v1.DaemonSet, error)

type DaemonSetController interface {
	generic.ControllerMeta
	DaemonSetClient

	OnChange(ctx context.Context, name string, sync DaemonSetHandler)
	OnRemove(ctx context.Context, name string, sync DaemonSetHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() DaemonSetCache
}

type DaemonSetClient interface {
	Create(*v1.DaemonSet) (*v1.DaemonSet, error)
	Update(*v1.DaemonSet) (*v1.DaemonSet, error)
	UpdateStatus(*v1.DaemonSet) (*v1.DaemonSet, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.DaemonSet, error)
	List(namespace string, opts metav1.ListOptions) (*v1.DaemonSetList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.DaemonSet, err error)
}

type DaemonSetCache interface {
	Get(namespace, name string) (*v1.DaemonSet, error)
	List(namespace string, selector labels.Selector) ([]*v1.DaemonSet, error)

	AddIndexer(indexName string, indexer DaemonSetIndexer)
	GetByIndex(indexName, key string) ([]*v1.DaemonSet, error)
}

type DaemonSetIndexer func(obj *v1.DaemonSet) ([]string, error)

type daemonSetController struct {
	*generic.Controller[*v1.DaemonSet, *v1.DaemonSetList]
}

func (c *daemonSetController) OnChange(ctx context.Context, name string, sync DaemonSetHandler) {
	c.Controller.OnChange(ctx, name, generic.ObjectHandler[*v1.DaemonSet](sync))
}

func (c *daemonSetController) OnRemove(ctx context.Context, name string, sync DaemonSetHandler) {
	c.Controller.OnRemove(ctx, name, generic.ObjectHandler[*v1.DaemonSet](sync))
}

func (c *daemonSetController) Cache() DaemonSetCache {
	return &daemonSetCache{
		c.Controller.Cache(),
	}
}

type daemonSetCache struct {
	*generic.Cache[*v1.DaemonSet]
}

func (c *daemonSetCache) AddIndexer(indexName string, indexer DaemonSetIndexer) {
	c.Cache.AddIndexer(indexName, generic.Indexer[*v1.DaemonSet](indexer))
}

type DaemonSetStatusHandler func(obj *v1.DaemonSet, status v1.DaemonSetStatus) (v1.DaemonSetStatus, error)

type DaemonSetGeneratingHandler func(obj *v1.DaemonSet, status v1.DaemonSetStatus) ([]runtime.Object, v1.DaemonSetStatus, error)

func FromDaemonSetHandlerToHandler(sync DaemonSetHandler) generic.Handler {
	return generic.FromObjectHandlerToHandler(generic.ObjectHandler[*v1.DaemonSet](sync))
}

func RegisterDaemonSetStatusHandler(ctx context.Context, controller DaemonSetController, condition condition.Cond, name string, handler DaemonSetStatusHandler) {
	statusHandler := &daemonSetStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromDaemonSetHandlerToHandler(statusHandler.sync))
}

func RegisterDaemonSetGeneratingHandler(ctx context.Context, controller DaemonSetController, apply apply.Apply,
	condition condition.Cond, name string, handler DaemonSetGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &daemonSetGeneratingHandler{
		DaemonSetGeneratingHandler: handler,
		apply:                      apply,
		name:                       name,
		gvk:                        controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterDaemonSetStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type daemonSetStatusHandler struct {
	client    DaemonSetClient
	condition condition.Cond
	handler   DaemonSetStatusHandler
}

func (a *daemonSetStatusHandler) sync(key string, obj *v1.DaemonSet) (*v1.DaemonSet, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type daemonSetGeneratingHandler struct {
	DaemonSetGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *daemonSetGeneratingHandler) Remove(key string, obj *v1.DaemonSet) (*v1.DaemonSet, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1.DaemonSet{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *daemonSetGeneratingHandler) Handle(obj *v1.DaemonSet, status v1.DaemonSetStatus) (v1.DaemonSetStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.DaemonSetGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
