/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	"github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type ConfigMapHandler func(string, *v1.ConfigMap) (*v1.ConfigMap, error)

type ConfigMapController interface {
	generic.ControllerMeta
	ConfigMapClient

	OnChange(ctx context.Context, name string, sync ConfigMapHandler)
	OnRemove(ctx context.Context, name string, sync ConfigMapHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() ConfigMapCache
}

type ConfigMapClient interface {
	Create(*v1.ConfigMap) (*v1.ConfigMap, error)
	Update(*v1.ConfigMap) (*v1.ConfigMap, error)

	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.ConfigMap, error)
	List(namespace string, opts metav1.ListOptions) (*v1.ConfigMapList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ConfigMap, err error)
}

type ConfigMapCache interface {
	Get(namespace, name string) (*v1.ConfigMap, error)
	List(namespace string, selector labels.Selector) ([]*v1.ConfigMap, error)

	AddIndexer(indexName string, indexer ConfigMapIndexer)
	GetByIndex(indexName, key string) ([]*v1.ConfigMap, error)
}

type ConfigMapIndexer func(obj *v1.ConfigMap) ([]string, error)

type configMapController struct {
	*generic.Controller[*v1.ConfigMap, *v1.ConfigMapList]
}

func (c *configMapController) OnChange(ctx context.Context, name string, sync ConfigMapHandler) {
	c.Controller.OnChange(ctx, name, generic.ObjectHandler[*v1.ConfigMap](sync))
}

func (c *configMapController) OnRemove(ctx context.Context, name string, sync ConfigMapHandler) {
	c.Controller.OnRemove(ctx, name, generic.ObjectHandler[*v1.ConfigMap](sync))
}

func (c *configMapController) Cache() ConfigMapCache {
	return &configMapCache{
		c.Controller.Cache(),
	}
}

type configMapCache struct {
	*generic.Cache[*v1.ConfigMap]
}

func (c *configMapCache) AddIndexer(indexName string, indexer ConfigMapIndexer) {
	c.Cache.AddIndexer(indexName, generic.Indexer[*v1.ConfigMap](indexer))
}
