/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	"github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type SecretHandler func(string, *v1.Secret) (*v1.Secret, error)

type SecretController interface {
	generic.ControllerMeta
	SecretClient

	OnChange(ctx context.Context, name string, sync SecretHandler)
	OnRemove(ctx context.Context, name string, sync SecretHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() SecretCache
}

type SecretClient interface {
	Create(*v1.Secret) (*v1.Secret, error)
	Update(*v1.Secret) (*v1.Secret, error)

	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.Secret, error)
	List(namespace string, opts metav1.ListOptions) (*v1.SecretList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Secret, err error)
}

type SecretCache interface {
	Get(namespace, name string) (*v1.Secret, error)
	List(namespace string, selector labels.Selector) ([]*v1.Secret, error)

	AddIndexer(indexName string, indexer SecretIndexer)
	GetByIndex(indexName, key string) ([]*v1.Secret, error)
}

type SecretIndexer func(obj *v1.Secret) ([]string, error)

type secretController struct {
	*generic.Controller[*v1.Secret, *v1.SecretList]
}

func (c *secretController) OnChange(ctx context.Context, name string, sync SecretHandler) {
	c.Controller.OnChange(ctx, name, generic.ObjectHandler[*v1.Secret](sync))
}

func (c *secretController) OnRemove(ctx context.Context, name string, sync SecretHandler) {
	c.Controller.OnRemove(ctx, name, generic.ObjectHandler[*v1.Secret](sync))
}

func (c *secretController) Cache() SecretCache {
	return &secretCache{
		c.Controller.Cache(),
	}
}

type secretCache struct {
	*generic.Cache[*v1.Secret]
}

func (c *secretCache) AddIndexer(indexName string, indexer SecretIndexer) {
	c.Cache.AddIndexer(indexName, generic.Indexer[*v1.Secret](indexer))
}
