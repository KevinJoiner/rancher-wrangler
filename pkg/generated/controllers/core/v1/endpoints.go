/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	"github.com/rancher/wrangler/pkg/generic"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type EndpointsHandler func(string, *v1.Endpoints) (*v1.Endpoints, error)

type EndpointsController interface {
	generic.ControllerMeta
	EndpointsClient

	OnChange(ctx context.Context, name string, sync EndpointsHandler)
	OnRemove(ctx context.Context, name string, sync EndpointsHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() EndpointsCache
}

type EndpointsClient interface {
	Create(*v1.Endpoints) (*v1.Endpoints, error)
	Update(*v1.Endpoints) (*v1.Endpoints, error)

	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.Endpoints, error)
	List(namespace string, opts metav1.ListOptions) (*v1.EndpointsList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Endpoints, err error)
}

type EndpointsCache interface {
	Get(namespace, name string) (*v1.Endpoints, error)
	List(namespace string, selector labels.Selector) ([]*v1.Endpoints, error)

	AddIndexer(indexName string, indexer EndpointsIndexer)
	GetByIndex(indexName, key string) ([]*v1.Endpoints, error)
}

type EndpointsIndexer func(obj *v1.Endpoints) ([]string, error)

type endpointsController struct {
	*generic.Controller[*v1.Endpoints, *v1.EndpointsList]
}

func (c *endpointsController) OnChange(ctx context.Context, name string, sync EndpointsHandler) {
	c.Controller.OnChange(ctx, name, generic.ObjectHandler[*v1.Endpoints](sync))
}

func (c *endpointsController) OnRemove(ctx context.Context, name string, sync EndpointsHandler) {
	c.Controller.OnRemove(ctx, name, generic.ObjectHandler[*v1.Endpoints](sync))
}

func (c *endpointsController) Cache() EndpointsCache {
	return &endpointsCache{
		c.Controller.Cache(),
	}
}

type endpointsCache struct {
	*generic.Cache[*v1.Endpoints]
}

func (c *endpointsCache) AddIndexer(indexName string, indexer EndpointsIndexer) {
	c.Cache.AddIndexer(indexName, generic.Indexer[*v1.Endpoints](indexer))
}
